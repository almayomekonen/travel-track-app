{"version":3,"sources":["shared/components/UIElements/Card.js","shared/hooks/form-hook.js","places/pages/UpdatePlace.js"],"names":["Card","props","React","createElement","className","concat","style","children","formReducer","state","action","type","formIsValid","inputId","inputs","isValid","value","useForm","initialInputs","initialFormValidity","formState","dispatch","useReducer","useCallback","id","inputData","formValidity","UpdatePlace","auth","useContext","AuthContext","isLoading","error","sendRequest","clearError","useHttpClient","loadedPlace","setLoadedPlace","useState","placeId","useParams","history","useHistory","inputHandler","setFormData","title","description","useEffect","async","responseData","process","place","err","fetchPlace","LoadingSpinner","Fragment","ErrorModal","onClear","onSubmit","event","preventDefault","JSON","stringify","Authorization","token","push","userId","Input","element","label","validators","VALIDATOR_REQUIRE","errorText","onInput","initialValue","initialValid","VALIDATOR_MINLENGTH","Button","disabled"],"mappings":"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","file":"static/js/7.040c03a5.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import { useCallback, useReducer } from \"react\";\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case \"INPUT_CHANGE\":\n      let formIsValid = true;\n      for (const inputId in state.inputs) {\n        if (!state.inputs[inputId]) {\n          continue;\n        }\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n      return {\n        ...state,\n        inputs: {\n          ...state.inputs,\n          [action.inputId]: { value: action.value, isValid: action.isValid },\n        },\n        isValid: formIsValid,\n      };\n    case \"SET_DATA\":\n      return {\n        inputs: action.inputs,\n        isValid: action.formIsValid,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity,\n  });\n\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: \"INPUT_CHANGE\",\n      value: value,\n      isValid: isValid,\n      inputId: id,\n    });\n  }, []);\n\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: \"SET_DATA\",\n      inputs: inputData,\n      formIsValid: formValidity,\n    });\n  }, []);\n\n  return [formState, inputHandler, setFormData];\n};\n","import React, { useEffect, useState, useContext } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport Card from \"../../shared/components/UIElements/Card\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport {\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MINLENGTH,\n} from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport \"./PlaceForm.css\";\n\nconst UpdatePlace = () => {\n  const auth = useContext(AuthContext);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [loadedPlace, setLoadedPlace] = useState();\n  const placeId = useParams().placeId;\n  const history = useHistory();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      title: {\n        value: \"\",\n        isValid: false,\n      },\n      description: {\n        value: \"\",\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  useEffect(() => {\n    const fetchPlace = async () => {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`\n        );\n        setLoadedPlace(responseData.place);\n        setFormData(\n          {\n            title: {\n              value: responseData.place.title,\n              isValid: true,\n            },\n            description: {\n              value: responseData.place.description,\n              isValid: true,\n            },\n          },\n          true\n        );\n      } catch (err) {}\n    };\n    fetchPlace();\n  }, [sendRequest, placeId, setFormData]);\n\n  const placeUpdateSubmitHandler = async (event) => {\n    event.preventDefault();\n    try {\n      await sendRequest(\n        `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`,\n        \"PATCH\",\n        JSON.stringify({\n          title: formState.inputs.title.value,\n          description: formState.inputs.description.value,\n        }),\n        {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + auth.token,\n        }\n      );\n      history.push(\"/\" + auth.userId + \"/places\");\n    } catch (err) {}\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"center\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (!loadedPlace && !error) {\n    return (\n      <div className=\"center\">\n        <Card>\n          <h2>Could not find place!</h2>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {!isLoading && loadedPlace && (\n        <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\n          <Input\n            id=\"title\"\n            element=\"input\"\n            type=\"text\"\n            label=\"Title\"\n            validators={[VALIDATOR_REQUIRE()]}\n            errorText=\"Please enter a valid title.\"\n            onInput={inputHandler}\n            initialValue={loadedPlace.title}\n            initialValid={true}\n          />\n          <Input\n            id=\"description\"\n            element=\"textarea\"\n            label=\"Description\"\n            validators={[VALIDATOR_MINLENGTH(5)]}\n            errorText=\"Please enter a valid description (min. 5 characters).\"\n            onInput={inputHandler}\n            initialValue={loadedPlace.description}\n            initialValid={true}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            UPDATE PLACE\n          </Button>\n        </form>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default UpdatePlace;\n"],"sourceRoot":""}