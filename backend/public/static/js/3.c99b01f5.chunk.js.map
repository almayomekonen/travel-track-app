{"version":3,"sources":["shared/components/UIElements/Card.js","shared/hooks/form-hook.js","shared/components/FormElements/imageUpload.js","user/pages/Auth.js"],"names":["Card","props","React","createElement","className","concat","style","children","formReducer","state","action","type","formIsValid","inputId","inputs","isValid","value","useForm","initialInputs","initialFormValidity","formState","dispatch","useReducer","useCallback","id","inputData","formValidity","ImageUpload","file","setFile","useState","previewUrl","setPreviewUrl","isVaild","setIsvalid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","display","ref","accept","onChange","event","pickedFile","fileIsValid","target","files","length","onInput","center","src","alt","Button","onClick","pickImageHandler","current","click","errorText","Auth","auth","useContext","AuthContext","isLoginMode","setIsLoginMode","isLoading","error","sendRequest","clearError","useHttpClient","inputHandler","setFormData","email","password","Fragment","ErrorModal","onClear","LoadingSpinner","asOverlay","onSubmit","async","preventDefault","responseData","process","JSON","stringify","login","userId","token","err","formData","FormData","append","name","image","Input","element","label","validators","VALIDATOR_REQUIRE","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","disabled","inverse","switchModeHandler","undefined","prevMode"],"mappings":"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","file":"static/js/3.c99b01f5.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import { useCallback, useReducer } from \"react\";\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case \"INPUT_CHANGE\":\n      let formIsValid = true;\n      for (const inputId in state.inputs) {\n        if (!state.inputs[inputId]) {\n          continue;\n        }\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n      return {\n        ...state,\n        inputs: {\n          ...state.inputs,\n          [action.inputId]: { value: action.value, isValid: action.isValid },\n        },\n        isValid: formIsValid,\n      };\n    case \"SET_DATA\":\n      return {\n        inputs: action.inputs,\n        isValid: action.formIsValid,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity,\n  });\n\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: \"INPUT_CHANGE\",\n      value: value,\n      isValid: isValid,\n      inputId: id,\n    });\n  }, []);\n\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: \"SET_DATA\",\n      inputs: inputData,\n      formIsValid: formValidity,\n    });\n  }, []);\n\n  return [formState, inputHandler, setFormData];\n};\n","import React, { useRef, useState, useEffect } from \"react\";\nimport \"./imageUpload.css\";\nimport Button from \"./Button\";\n\nconst ImageUpload = (props) => {\n  const [file, setFile] = useState();\n  const [previewUrl, setPreviewUrl] = useState();\n  const [isVaild, setIsvalid] = useState(false);\n\n  const filePickerRef = useRef();\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      setPreviewUrl(fileReader.result);\n    };\n    fileReader.readAsDataURL(file);\n  }, [file]);\n\n  const pickHandler = (event) => {\n    let pickedFile;\n    let fileIsValid = isVaild;\n    if (event.target.files && event.target.files.length === 1) {\n      pickedFile = event.target.files[0];\n      setFile(pickedFile);\n      setIsvalid(true);\n      fileIsValid = true;\n    } else {\n      setIsvalid(false);\n      fileIsValid = false;\n    }\n    props.onInput(props.id, pickedFile, fileIsValid);\n  };\n\n  const pickImageHandler = () => {\n    filePickerRef.current.click();\n  };\n\n  return (\n    <div className=\"from-control\">\n      <input\n        type=\"file\"\n        id={props.id}\n        style={{ display: \"none\" }}\n        ref={filePickerRef}\n        accept=\".jpg,.png,.jpeg\"\n        onChange={pickHandler}\n      />\n\n      <div className={`image-upload ${props.center && \"center\"}`}>\n        <div className=\"image-upload__preview\">\n          {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\n          {!previewUrl && <p>Please Pick an image.</p>}\n        </div>\n        <Button type=\"button\" onClick={pickImageHandler}>\n          PICK IMAGE\n        </Button>\n      </div>\n      {!isVaild && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default ImageUpload;\n","import React, { useState, useContext } from \"react\";\n\nimport Card from \"../../shared/components/UIElements/Card\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ImageUpload from \"../../shared/components/FormElements/imageUpload\";\nimport {\n  VALIDATOR_EMAIL,\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_REQUIRE,\n} from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport \"./Auth.css\";\n\nconst Auth = () => {\n  const auth = useContext(AuthContext);\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      email: {\n        value: \"\",\n        isValid: false,\n      },\n      password: {\n        value: \"\",\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: undefined,\n          image: undefined,\n        },\n        formState.inputs.email.isValid && formState.inputs.password.isValid\n      );\n    } else {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: {\n            value: \"\",\n            isValid: false,\n          },\n          image: {\n            value: null,\n            isValid: false,\n          },\n        },\n        false\n      );\n    }\n    setIsLoginMode((prevMode) => !prevMode);\n  };\n\n  const authSubmitHandler = async (event) => {\n    event.preventDefault();\n\n    if (isLoginMode) {\n      try {\n        const responseData = await sendRequest(\n          process.env.REACT_APP_BACKEND_URL + \"/users/login\",\n          \"POST\",\n          JSON.stringify({\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value,\n          }),\n          {\n            \"Content-Type\": \"application/json\",\n          }\n        );\n        auth.login(responseData.userId, responseData.token);\n      } catch (err) {}\n    } else {\n      try {\n        const formData = new FormData();\n        formData.append(\"email\", formState.inputs.email.value);\n        formData.append(\"name\", formState.inputs.name.value);\n        formData.append(\"password\", formState.inputs.password.value);\n        formData.append(\"image\", formState.inputs.image.value);\n        const responseData = await sendRequest(\n          process.env.REACT_APP_BACKEND_URL + \"/users/signup\",\n          \"POST\",\n          formData\n        );\n\n        auth.login(responseData.userId, responseData.token);\n      } catch (err) {}\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <Card className=\"authentication\">\n        {isLoading && <LoadingSpinner asOverlay />}\n        <h2>Login Required</h2>\n        <hr />\n        <form onSubmit={authSubmitHandler}>\n          {!isLoginMode && (\n            <Input\n              element=\"input\"\n              id=\"name\"\n              type=\"text\"\n              label=\"Your Name\"\n              validators={[VALIDATOR_REQUIRE()]}\n              errorText=\"Please enter a name.\"\n              onInput={inputHandler}\n            />\n          )}\n          {!isLoginMode && (\n            <ImageUpload\n              center\n              id=\"image\"\n              onInput={inputHandler}\n              errorText=\"Please provide an image.\"\n            />\n          )}\n          <Input\n            element=\"input\"\n            id=\"email\"\n            type=\"email\"\n            label=\"E-Mail\"\n            validators={[VALIDATOR_EMAIL()]}\n            errorText=\"Please enter a valid email address.\"\n            onInput={inputHandler}\n          />\n          <Input\n            element=\"input\"\n            id=\"password\"\n            type=\"password\"\n            label=\"Password\"\n            validators={[VALIDATOR_MINLENGTH(6)]}\n            errorText=\"Please enter a valid password, at least 6 characters.\"\n            onInput={inputHandler}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            {isLoginMode ? \"LOGIN\" : \"SIGNUP\"}\n          </Button>\n        </form>\n        <Button inverse onClick={switchModeHandler}>\n          SWITCH TO {isLoginMode ? \"SIGNUP\" : \"LOGIN\"}\n        </Button>\n      </Card>\n    </React.Fragment>\n  );\n};\n\nexport default Auth;\n"],"sourceRoot":""}